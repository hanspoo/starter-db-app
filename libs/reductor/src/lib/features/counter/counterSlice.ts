import { IOrdenCompra } from '@flash-ws/api-interfaces';
import axios from 'axios';
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export interface CounterState {
  token: string;
  loggedIn: boolean;
  value: number;
  status: 'idle' | 'loading' | 'failed';
  ordenes: Array<IOrdenCompra>;
}

const initialState: CounterState = {
  token: '',
  loggedIn: false,
  value: 0,
  status: 'idle',
  ordenes: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const actualizarOrdenes: any = createAsyncThunk(
  'counter/fetchCount',
  async () => {
    const response = await axios.get(
      `${process.env['NX_SERVER_URL']}/api/ordenes`
    );
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
    setLoggedIn: (state, action: PayloadAction<string>) => {
      if (!action.payload) {
        console.log('setLoggedIn, error, no viene el token');
        return;
      }

      state.loggedIn = true;
      state.token = action.payload;
    },
    logout: (state) => {
      state.loggedIn = false;
      state.token = '';
    },
    setOrdenes: (state, action: PayloadAction<Array<IOrdenCompra>>) => {
      state.ordenes = action.payload;
    },
    actualizarOrden: (state, action: PayloadAction<IOrdenCompra>) => {
      const orden = action.payload;
      const existe = state.ordenes.find((o) => o.id === orden.id);
      if (!existe) state.ordenes = state.ordenes.concat(orden);
      else
        state.ordenes = state.ordenes.map((o) =>
          o.id === orden.id ? orden : o
        );
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(actualizarOrdenes.fulfilled, (state, action) => {
      state.status = 'idle';
      state.ordenes = action.payload;
    });
  },
});

export const {
  setOrdenes,
  increment,
  decrement,
  incrementByAmount,
  actualizarOrden,
  setLoggedIn,
  logout,
} = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default counterSlice.reducer;
